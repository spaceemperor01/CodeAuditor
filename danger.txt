fopen_s#4#测试
printf#4#测试
strcpy_s#4#测试
system#4#测试
gets#0#使用 fgets（buf, size, stdin）。这几乎总是一个大问题！
strcpy#1#改为使用 strncpy。
strcat#1#改为使用 strncat。
sprintf#1#改为使用 snprintf，或者使用精度说明符。
scanf#1#使用精度说明符，或自己进行解析。
sscanf#1#使用精度说明符，或自己进行解析。
fscanf#1#使用精度说明符，或自己进行解析。
vfscanf#1#使用精度说明符，或自己进行解析。
vsprintf#1#改为使用 vsnprintf，或者使用精度说明符。
vscanf#1#使用精度说明符，或自己进行解析。
vsscanf#1#使用精度说明符，或自己进行解析。
streadd#1#确保分配的目的地参数大小是源参数大小的四倍。
strecpy#1#确保分配的目的地参数大小是源参数大小的四倍。
strtrns#1#手工检查来查看目的地大小是否至少与源字符串相等。
realpath#1#分配缓冲区大小为 MAXPATHLEN。同样，手工检查参数以确保输入参数不超过 MAXPATHLEN。
syslog#1#在将字符串输入传递给该函数之前，将所有字符串输入截成合理的大小。
getopt#1#在将字符串输入传递给该函数之前，将所有字符串输入截成合理的大小。
getopt_long#1#在将字符串输入传递给该函数之前，将所有字符串输入截成合理的大小。
getpass#1#在将字符串输入传递给该函数之前，将所有字符串输入截成合理的大小。
getchar#2#如果在循环中使用该函数，确保检查缓冲区边界。
fgetc#2#如果在循环中使用该函数，确保检查缓冲区边界。
getc#2#如果在循环中使用该函数，确保检查缓冲区边界。
read#2#如果在循环中使用该函数，确保检查缓冲区边界。
bcopy#3#确保缓冲区大小与它所说的一样大。
fgets#3#确保缓冲区大小与它所说的一样大。
memcpy#3#确保缓冲区大小与它所说的一样大。
snprintf#3#确保缓冲区大小与它所说的一样大。
strccpy#3#确保缓冲区大小与它所说的一样大。
strcadd#3#确保缓冲区大小与它所说的一样大。
strncpy#3#确保缓冲区大小与它所说的一样大。
vsnprintf#3#确保缓冲区大小与它所说的一样大。
